import React, { useMemo, useState } from "react";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  Legend as RechartsLegend,
} from "recharts";
const THRESHOLDS = {
  GOOD: 60,
  MODERATE: 80,
};

const AQI_COLORS = {
  GOOD: "#ffb6c1"
  MODERATE: "#add8e6"
  POOR: "#000000"
};
function generateFakeSeries() {
  const hours = [];
  const start = new Date(2025, 0, 1, 0, 0, 0); 
  for (let i = 0; i < 50; i++) {
    const t = new Date(start.getTime() + i * 3600 * 1000);
    const wind = (5 * i) / 49; 
    const pm25 = Math.max(5, 100 - 8 * wind + (Math.random() - 0.5) * 6);
    hours.push({ time: t.toISOString().slice(0, 16).replace("T", " "), pm25: Math.round(pm25), wind: Number(wind.toFixed(2)) });
  }
  return hours;
}
function predictAQILocal(pm25) {
  if (pm25 > THRESHOLDS.MODERATE) return { label: "Poor", color: AQI_COLORS.POOR };
  if (pm25 > THRESHOLDS.GOOD) return { label: "Moderate", color: AQI_COLORS.MODERATE };
  return { label: "Good", color: AQI_COLORS.GOOD };
}

function Badge({ label, color }) {
  return (
    <div className="inline-flex items-center gap-3 px-4 py-3 rounded-2xl shadow-md" style={{ background: color }}>
      <div className="w-4 h-4 rounded-sm" style={{ background: "rgba(0,0,0,0.15)" }}></div>
      <div className="text-sm font-semibold text-gray-900">{label}</div>
    </div>
  );
}

function InputCard({ onPredict }) {
  const [pm25, setPm25] = useState(75);
  const [wind, setWind] = useState(1.5);

  function submit(e) {
    e.preventDefault();
    onPredict({ pm25: Number(pm25), wind: Number(wind) });
  }

  return (
    <form className="bg-white p-4 rounded-2xl shadow-md w-full max-w-xl" onSubmit={submit}>
      <h3 className="text-lg font-semibold mb-3">Quick Predict</h3>
      <div className="grid grid-cols-2 gap-3">
        <div>
          <label className="block text-xs text-gray-500">PM2.5 (µg/m³)</label>
          <input
            value={pm25}
            onChange={(e) => setPm25(e.target.value)}
            type="number"
            min="0"
            className="mt-1 w-full rounded-lg border px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-200"
          />
        </div>
        <div>
          <label className="block text-xs text-gray-500">Wind speed (m/s)</label>
          <input
            value={wind}
            onChange={(e) => setWind(e.target.value)}
            type="number"
            step="0.1"
            min="0"
            className="mt-1 w-full rounded-lg border px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-200"
          />
        </div>
      </div>
      <div className="mt-4 flex items-center gap-3">
        <button type="submit" className="px-4 py-2 bg-indigo-600 text-white rounded-lg shadow hover:bg-indigo-500">Predict</button>
        <button
          type="button"
          onClick={() => {
            setPm25(75);
            setWind(1.5);
          }}
          className="px-3 py-2 border rounded-lg text-sm"
        >
          Reset
        </button>
      </div>
    </form>
  );
}

function AQIBadge({ pm25 }) {
  const { label, color } = predictAQILocal(pm25);
  return (
    <div className="bg-white p-4 rounded-2xl shadow-md w-full max-w-sm flex items-center justify-between">
      <div>
        <div className="text-xs text-gray-500">Predicted Air Quality</div>
        <div className="mt-1 text-xl font-bold">{label}</div>
        <div className="text-sm text-gray-600">PM2.5 ≈ {pm25} µg/m³</div>
      </div>
      <div className="flex items-center gap-3">
        <div style={{ background: color }} className="w-10 h-10 rounded-md shadow-sm"></div>
      </div>
    </div>
  );
}

function TimeSeriesChart({ data }) {
  return (
    <div className="bg-white p-4 rounded-2xl shadow-md h-72">
      <h4 className="font-semibold mb-2">PM2.5 Over Time</h4>
      <ResponsiveContainer width="100%" height="82%">
        <LineChart data={data}>
          <XAxis dataKey="time" tick={{ fontSize: 10 }} interval={7} />
          <YAxis />
          <Tooltip />
          <Line type="monotone" dataKey="pm25" stroke="#8884d8" strokeWidth={2} dot={false} />
        </LineChart>
      </ResponsiveContainer>
    </div>
  );
}

function PieAQI({ data }) {
  const good = data.filter((d) => d.pm25 <= THRESHOLDS.GOOD).length;
  const moderate = data.filter((d) => d.pm25 > THRESHOLDS.GOOD && d.pm25 <= THRESHOLDS.MODERATE).length;
  const poor = data.filter((d) => d.pm25 > THRESHOLDS.MODERATE).length;
  const pieData = [
    { name: "Good", value: good, color: AQI_COLORS.GOOD },
    { name: "Moderate", value: moderate, color: AQI_COLORS.MODERATE },
    { name: "Poor", value: poor, color: AQI_COLORS.POOR },
  ];

  return (
    <div className="bg-white p-4 rounded-2xl shadow-md h-72 flex flex-col">
      <h4 className="font-semibold mb-2">AQI Distribution</h4>
      <div className="flex-1 flex items-center justify-center">
        <ResponsiveContainer width="80%" height="80%">
          <PieChart>
            <Pie data={pieData} dataKey="value" nameKey="name" outerRadius={80} label>
              {pieData.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={entry.color} />
              ))}
            </Pie>
            <RechartsLegend verticalAlign="top" align="right" />
          </PieChart>
        </ResponsiveContainer>
      </div>
      <div className="mt-2 flex gap-2 justify-end text-xs">
        <div className="flex items-center gap-2"><span style={{ background: AQI_COLORS.GOOD }} className="w-3 h-3 inline-block"/> Good</div>
        <div className="flex items-center gap-2"><span style={{ background: AQI_COLORS.MODERATE }} className="w-3 h-3 inline-block"/> Moderate</div>
        <div className="flex items-center gap-2"><span style={{ background: AQI_COLORS.POOR }} className="w-3 h-3 inline-block"/> Poor</div>
      </div>
    </div>
  );
}

export default function App() {
  const [series] = useState(() => generateFakeSeries());
  const [userInput, setUserInput] = useState({ pm25: 75, wind: 1.5 });

  const pieCounts = useMemo(() => {
    const good = series.filter((d) => d.pm25 <= THRESHOLDS.GOOD).length;
    const moderate = series.filter((d) => d.pm25 > THRESHOLDS.GOOD && d.pm25 <= THRESHOLDS.MODERATE).length;
    const poor = series.filter((d) => d.pm25 > THRESHOLDS.MODERATE).length;
    return { good, moderate, poor };
  }, [series]);
  function handlePredict({ pm25, wind }) {
    setUserInput({ pm25, wind });
  }
  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white p-6">
      <div className="max-w-6xl mx-auto">
        <header className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <div className="w-12 h-12 rounded-full bg-gradient-to-br from-indigo-400 to-pink-400 flex items-center justify-center text-white font-bold">SF</div>
            <div>
              <h1 className="text-2xl font-bold">StartoFlux</h1>
              <div className="text-xs text-gray-500">Air Quality Forecasting Dashboard</div>
            </div>
          </div>
          <div className="text-sm text-gray-600">Team StartoFlux</div>
        </header>
        <main className="grid grid-cols-3 gap-6">
          <div className="col-span-1">
            <InputCard onPredict={handlePredict} />
            <div className="mt-4">
              <AQIBadge pm25={userInput.pm25} />
            </div>
          </div>

          <div className="col-span-2 space-y-6">
            <TimeSeriesChart data={series} />
            <PieAQI data={series} />
          </div>
        </main>

        <footer className="mt-6 text-center text-xs text-gray-400">Built by Team StartoFlux · Demo data shown</footer>
      </div>
    </div>
  );
}
